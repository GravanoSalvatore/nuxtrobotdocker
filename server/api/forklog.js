import fetch from "node-fetch";
import { parseStringPromise } from "xml2js";

export default defineEventHandler(async () => {
  const feedUrl = "https://forklog.com/news";

  try {
    const response = await fetch(feedUrl);
    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RSS: ${response.status}`);
    
    let xmlText = await response.text();

    // üõ† –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ XML
    xmlText = xmlText.replace(/&(?!amp;|lt;|gt;|quot;|apos;)/g, "&amp;");

    const parsedData = await parseStringPromise(xmlText, { explicitArray: false });

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É RSS
    const items = parsedData?.rss?.channel?.item || [];

    // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç
    const articles = items.map((item) => ({
      title: item.title,
      link: item.link,
      pubDate: item.pubDate,
      description: item.description.replace(/<\/?[^>]+(>|$)/g, ""), // –£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏
    }));

    return { status: "success", articles };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:", error);
    return { status: "error", message: error.message };
  }
});
